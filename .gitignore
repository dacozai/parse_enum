book/artemis-guide/book
book/settings-guide/book
.vercel

# IntelliJ project files
.idea/*

# visual studio code files
.vscode
.dir-locals.el
.bash_history
.mysql_history

# Rust
target/
# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# OS related
### MacOS ###
.DS_Store
.AppleDouble
.LSOverride

# profile
flamegraph.*
perf.*

# tests
*.stderr
*.stdout
*.out
*.err
*.error
*.swp
_local_fs/
**/_meta*/
stateless_test_data/
**/_logs*/
_data/
_databend_data/
_databend_meta/
_cache/
_tmp/
tls/certs/
.databend/
checksums.txt
distro/
dist/
test/
tests/longrun/_*.csv
tests/longrun/**/_*.csv

# fuzz
hfuzz_target/
hfuzz_workspace/

# for tests in mac
*.stderr-e
*.stdout-e
tests/perfs/*-result.json
docker/build-tool/dev_setup.sh
docker/build-tool/rust-toolchain.toml

# python
venv/
*.pyc
.venv/
__pycache__/
.python-version

*.zip

# tpch data set
benchmark/tpch/data
# clickbench results
benchmark/clickbench/results

# direnv test files
.envrc

# z3
**/.z3-trace

# Local .terraform directories
**/.terraform*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

*.zip
